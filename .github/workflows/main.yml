name: Test and lint source code
on:
  push:
    branches:
      - master
      - develop
      - feature/githubActions
  pull_request:
    branches:
      - master
      - develop

jobs:
  lint:
    if: github.base_ref != 'develop' || github.base_ref == 'develop' && github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8.14
      uses: actions/setup-python@v1
      with:
        python-version: 3.8.14
    - name: Install python module requirements
      run: |
        pip3 install pylint
    - name: Static analysis python binding
      run: |
        pylint -d C0301 gmdh/gmdh.py tests/test_gmdh.py > pylint_report.txt
    - name: Archive python module linting results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: pylint_report
        path: pylint_report.txt

  test:
    if: github.base_ref != 'develop' || github.base_ref == 'develop' && github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install python module requirements
      run: |
        pip3 install -r requirements.txt
    - name: Install dependencies for compilation
      run: |
        sudo apt-get install -y gcc g++ build-essential cmake libgtest-dev
        wget -O boost_1_79_0.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.tar.gz
        tar xzvf boost_1_79_0.tar.gz
        cd boost_1_79_0/
        sudo ./bootstrap.sh --prefix=/usr/local
        sudo ./b2 install --with-filesystem --with-system --with-thread --with-json --with-chrono
        export LD_LIBRARY_PATH=/usr/local/lib
    - name: Build targets for testing
      run: |
        mkdir -p build/Release && cd build/Release && cmake -DCMAKE_BUILD_TYPE=Release ../.. && cmake --build . --config Release --target gmdh_tests _gmdh_core
    - name: Run test cpp shared library
      run: |
        ./build/Release/gmdh_tests
    - name: Run pytests
      run: |
        pytest -v & coverage html
    - name: Archive python code tests results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: python_code_tests_report
        path: tests/tests_report.html
    - name: Archive code coverage results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: code_coverage_report
        path: htmlcov/
      
    